#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Mar 18 10:39:51 2021

@author: 
   ___  _ ____             __          
  / _ \(_) / /__ ___      / /  ___ ___ 
 / // / / / / -_) _ \    / /__/ -_) -_)
/____/_/_/_/\__/_//_/   /____/\__/\__/ 

"""
#Bear Lambeetroot data analysis
#import the required data
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import curve_fit


redC, redI, redE = np.loadtxt('RedRED.csv',delimiter=',',unpack=True,skiprows=1)
blueC, blueI, greenC, greenI, blueE, greenE = np.loadtxt('RedBLUEGREEN.csv',delimiter=',',unpack=True,skiprows=1)

'''
#uncomment if you want to delete the elements in blue
#for reasons to do with np.delete add index in decreasing order
for deletus in [3]:
    blueC = np.delete(blueC,deletus)
    blueI = np.delete(blueI,deletus)
    blueE = np.delete(blueE,deletus)
'''

#create an array gathering all the concentrations and intensities to make it more compact
concentration=[redC,blueC,greenC]
intensity=[redI,blueI,greenI]
errors = [redE,blueE,greenE]

colours = ["Red","Blue","Green"]


#normalise the intensity
newIntensity = []
for arr in intensity:
    arr=[x/arr[0] for x in arr]
    newIntensity.append(arr)    


#create some x values for a smooth curve
xVals = np.linspace(0, 0.006,num=100)

#create the function for the curve fit to optimise
def func(x,e):
    #l is the length of the container which is 5.5 cm
    l=5.5e-2
    arg = -x*e*l
    return np.exp(arg)



for i in range(3):

#error analysis
    error = errors[i]
    
    
#produce an exponential fit for each curve
    fitCoeff,cov = curve_fit(func,concentration[i], newIntensity[i],[100],sigma=[1-x for x in error])
    curveError = np.sqrt(cov[0][0])
    print("The error in the value is Â±%f and the value is %f"%(curveError,*fitCoeff))
    yVals = []
    for x in xVals:
        yVals.append(func(x,*fitCoeff))
    
#plot the points
    plt.errorbar(concentration[i],newIntensity[i], fmt=colours[i], yerr=error,capsize=3)
    plt.plot(xVals,yVals,'orange')
    plt.grid()
    plt.title("Red LED shone through "+str(colours[i]) + " dye")
    plt.xlabel("Concentration")
    plt.ylabel("Intensity/I0")
    plt.legend(['Fitted exponential curve','Measured data points'])
    plt.show()